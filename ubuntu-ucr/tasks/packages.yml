---
- name: Ensure wget cache folder is created.
  file:
    path: "{{ wget_cache_path }}"
    state: directory
  when: wget_cache_path != ''

- name: unitTest - wget cache folder is created.
  command: ls {{ wget_cache_path }}
  register: result
  change_when: false
  failed_when: "'exist*' in result.stdout"
  tags:
    - unitTests

- name: Enable unattended updates - distro.
  lineinfile:
    path: "{{ unattended_file_path }}"
    line: '        "${distro_id}:${distro_codename}";'
    insertafter: 'Unattended-Upgrade::Allowed-Origins {'

- name: unitTest - enable unattended updates - distro.
  command: grep '"${distro_id}:${distro_codename}";' {{ unattended_file_path }}
  register: result
  change_when: false
  failed_when: result.stdout == ''
  tags:
    - unitTests

- name: Enable unattended updates - minimal steps.
  lineinfile:
    path: "{{ unattended_file_path }}"
    line: 'Unattended-Upgrade::MinimalSteps "true";'
    insertafter: '//Unattended-Upgrade::MinimalSteps "false";'

- name: unitTest - enable unattended updates - minimal steps.
  command: grep 'Unattended-Upgrade::MinimalSteps "true";' {{ unattended_file_path }}
  register: result
  change_when: false
  failed_when: result.stdout == ''
  tags:
    - unitTests

- name: Enable unattended updates - unused dependencies.
  lineinfile:
    path: "{{ unattended_file_path }}"
    line: 'Unattended-Upgrade::Remove-Unused-Dependencies "true";'
    insertafter: '//Unattended-Upgrade::Remove-Unused-Dependencies "false";'

- name: unitTest - enable unattended updates - unused dependencies.
  command: grep 'Unattended-Upgrade::Remove-Unused-Dependencies "true";' {{ unattended_file_path }}
  register: result
  change_when: false
  failed_when: result.stdout == ''
  tags:
    - unitTests
